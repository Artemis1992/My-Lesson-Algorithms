# 6. Напишите функцию, которая сортирует список чисел по возрастанию (пузырьковая сортировка).
ppp = "\n---------------------------------------------------"
print(ppp)


def bubble_sort(arr):
    n = len(arr) # Получаем длину массива
    for index in range(n): # Проходим по всему массиву
        swapped = False # Переменная, чтобы проверить, был ли произведен обмен в этом проходе
        for j in range(0, n-index-1): # Проходим по массиву от 0 до n-i-1
            if arr[j] > arr[j+1]: # Если текущий элемент больше следующего
                arr[j], arr[j+1] = arr[j+1], arr[j] # Меняем их местами
                swapped = True  # Устанавливаем swapped в True, так как произошел обмен
        if not swapped: # Если ни одного обмена не произошло, массив уже отсортирован
            break # Прерываем цикл


arr = [42, 56, 17, 98, 34, 82, 11]
bubble = bubble_sort(arr)
print(f"Отсортированный массив {arr}")







ppp = "\n---------------------------------------------------"
print(ppp)

# ---------------------------------Строка 1-----------------------------
# Это выражение используется в Python для получения длины (количества элементов) списка arr. 
# Вот несколько примеров, как его можно применять:
# 1 Вывод длины списка:


arr1 = [1, 2, 3, 4, 5]
n = len(arr1)
print("\nДлина списка arr:", n)  # Выведет: Длина списка arr: 5

                    # 2 Использование в условных выражениях:
ppp = "\n---------------------------------------------------"
print(ppp)

arr2 = [12, 52, 75]
if len(arr2) > 0:
    print("\n Список не пустой")
else:
    print("Список пуст")
    
                    # 3 Использование в цикле для итерации по списку:
ppp = "\n---------------------------------------------------"
print(ppp)


arr3 = ["a", "b", "c", "d"]
for i in range(len(arr3)):
    print(f" Элемент {i}: {arr3[i]}")

# Функция len() возвращает количество элементов в списке, кортеже или любой другой последовательности.

# ---------------------------------Строка 2-----------------------------
ppp = "\n---------------------------------------------------"
print(ppp)
# Рассмотрим примеры использования переменной swapped = False в более общих контекстах:	

swapped = False
if not swapped:
    print("Переменная ровна", swapped)
else:
    print("Переменная не ровна\n", swapped)
    
    
ppp = "\n---------------------------------------------------"
print(ppp)
                    # 2 Пример использования в функции:


def process_data(data):
    swapped = False
    # Логика обработки данных, которая может изменять значение swapped
    if data:
        swapped = True
    return swapped
data = [1, 2, 3, 4]
print(process_data(data))


ppp = "\n---------------------------------------------------"
print(ppp)
                    # 3 Пример использования в цикле:


# swapped = False
# while not swapped:
#     print("Цикл выполняется, пока swapped равно False")
#     user_input = input("Введите 'да' для завершения цикла: ")
#     if user_input.lower() == "да":
#         swapped = True
# print("Цикл завершен.")


ppp = "\n---------------------------------------------------"
print(ppp)

# Внутренний цикл for проходит по элементам списка от начала до n-i-1. 
# С каждым внешним проходом i этот диапазон уменьшается, 
# так как последний элемент после каждого прохода уже отсортирован и находится на своем месте.
# for j in range(0, n-i-1):

arr4 = [1, 2, 3, 4]
n = len(arr4)
for i in range(0, n-i-1):
    if arr4[n] > arr4[n+1]:
        print(True)
    else:
        print(False)
        
ppp = "\n---------------------------------------------------"
print(ppp)
# Внутри внутреннего цикла мы сравниваем текущий элемент arr[j] со следующим элементом arr[j+1]. 
# Если текущий элемент больше 
# следующего, это означает, что элементы находятся в неправильном порядке для сортировки по возрастанию.

# Пример 1: Поиск первого случая, когда элемент больше следующего

arr5 = [10, 3, 8, 5, 2]

for i in range(len(arr5) - 1):
    if arr5[i] > arr5[i+1]:
        print(f"Элемент {arr5[i]} больше элемента  {arr5[i+1]} на позиции {i}")
    elif arr5[i] < arr5[i+1]:
        print(f"Элемент {arr5[i]} меньше элемента  {arr5[i+1]} на позиции {i}")
    else:
        print(f"Элемент {arr5[i]} равен {arr5[i+1]} на позиции {i}")


ppp = "\n---------------------------------------------------"
print(ppp)
# Пример 2: Подсчет количества случаев, когда элемент больше следующего

arr6 = [1, 4, 3, 2, 6, 5]

count = 0
for j in range(len(arr6) - 1):
    if arr6[j] > arr6[j+1]:
        count += 1
print(f"Количество случаев, когда элемент больше следующего: {count}")


ppp = "\n---------------------------------------------------"
print(ppp)
# Пример 3: Проверка, отсортирован ли массив по возрастанию.

arr7 = [2, 3, 5, 8, 6, 1, 4, 7]

sorted = True
for i in range(len(arr7) - 1):
    if arr7[i] > arr7[i+1]:
        sorted = False
        break

if sorted:
    print("Массив отсортирован по возрастанию")
else:
    print("Массив не отсортирован по возрастанию") 

ppp = "\n---------------------------------------------------"
print(ppp)
# Пример 4: Печать всех пар, где элемент больше следующего или равны.

arr8 = [9, 7, 2, 5, 3, 1, 1]

for i in range(len(arr8) - 1):
    if arr8[i] > arr8[i+1]:
        print(f"Элемент {arr8[i]} больше элемента {arr8[i+1]}")
    elif arr8[i] < arr8[i+1]:
        print(f"Элемент {arr8[i]} меньше элемента {arr8[i+1]}")
    else:
        print(f"Элемент {arr8[i]} равен елементу {arr8[i+1]}")


ppp = "\n---------------------------------------------------"
print(ppp)
# Если элементы в неправильном порядке, мы меняем их местами. 
# Это делается с помощью параллельного присваивания.
# Пример 1: Перестановка двух соседних элементов

arr9 = [1, 2, 3, 4, 5, 6]
# Меняем местами второй и третий элемент
j = 1
arr9[j], arr9[j+1] = arr9[j+1], arr9[j]
print(arr9) # [1, 3, 2, 4, 5]


ppp = "\n---------------------------------------------------"
print(ppp)
# Пример 2: Перестановка первого и второго элемента

arr10 = [10, 20, 30, 40, 50]
# Меняем местами первый и второй элемент
j = 0
arr10[j], arr10[j+1] = arr10[j+1], arr10[j]
print(arr10)


ppp = "\n---------------------------------------------------"
print(ppp)
# Пример 3: Перестановка в цикле с условием

arr11 = [5, 1, 4, 2, 8]
# Меняем местами элементы, если текущий элемент больше следующего.
for j in range(len(arr11) - 1):
    if arr11[j] > arr11[j+1]:
        arr11[j], arr11[j+1] = arr11[j+1], arr11[j]
print(arr11)


ppp = "\n---------------------------------------------------"
print(ppp)
# Пример 4: Перестановка в цикле без условия

arr12 = [1, 2, 3, 4, 5]
#Переставляем каждый элемент со следующим.
for j in range(len(arr12) - 1):
    arr12[j], arr12[j+1] = arr12[j+1], arr12[j]
print(arr12)

# После завершения внутреннего цикла 
# проверяем значение флага swapped. 
# Если он остался False, это означает, 
# что за весь проход не было сделано ни одного обмена, 
# и массив уже отсортирован. В этом случае мы выходим из 
# внешнего цикла с помощью break.

# Пример 1: Проверка на отсортированность

def swap_elements(arr):
    n = len(arr)
    for i in range(n-1):
        swapped = False
        if arr[i] > 10:  # Условие для перестановки
            arr[i], arr[i+1] = arr[i+1], arr[i]
            swapped = True
        # Если не было обменов, массив уже отсортирован
        if not swapped:
            break
    return arr

arr = [5, 15, 20, 10, 25]
print(swap_elements(arr))  # [5, 20, 15, 10, 25]


 
 
 
